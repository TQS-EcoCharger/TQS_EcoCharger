name: Test and Analyze Spring Boot Project (Unit Only)

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-analyze:
    name: Build and Analyze (Skip Functional Tests)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Clean package of backend without tests
        working-directory: ./backend
        run: mvn clean package -DskipTests

      - name: Write .env file
        run: |
          cat <<EOF > .env
          SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/ecocharger
          SPRING_DATASOURCE_USERNAME=ecocharger
          SPRING_DATASOURCE_PASSWORD=ecocharger
          EOF

      - name: Write test application.properties
        run: |
          mkdir -p backend/src/test/resources
          cat <<EOF > backend/src/test/resources/application.properties
          spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
          spring.datasource.driver-class-name=org.h2.Driver
          spring.datasource.username=sa
          spring.datasource.password=
          spring.sql.init.mode=never
          spring.flyway.enabled=true
          spring.flyway.locations=classpath:db/migration
          spring.flyway.clean-disabled=false
          spring.flyway.baseline-on-migrate=true
          spring.flyway.check-location=false
          spring.jpa.hibernate.ddl-auto=none
          spring.jpa.defer-datasource-initialization=false
          spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration+
          spring.security.enabled=false
          EOF

      - name: Write runtime application.properties
        run: |
          mkdir -p backend/src/main/resources
          cat <<EOF > backend/src/main/resources/application.properties
          spring.application.name=ecocharger
          spring.datasource.url=jdbc:postgresql://db:5432/ecocharger
          spring.datasource.username=ecocharger
          spring.datasource.password=ecocharger
          spring.datasource.driver-class-name=org.postgresql.Driver
          spring.jpa.show-sql=true
          spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
          spring.jpa.hibernate.ddl-auto=create
          spring.sql.init.data-locations=classpath:data.sql
          spring.sql.init.mode=always
          spring.sql.init.continue-on-error=false
          spring.sql.init.platform=postgres
          spring.jpa.defer-datasource-initialization=true
          spring.flyway.enabled=false
          springdoc.swagger-ui.path=/swagger-ui-custom.html
          springdoc.api-docs.path=/api-docs
          EOF

      - name: Build and analyze with SonarCloud (no functional tests)
        working-directory: ./backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify -Pexclude-functional-tests \
            org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=TQS-EcoCharger_TQS_EcoCharger

      - name: Debug test report
        working-directory: ./backend
        run: |
          echo "Listing test output:"
          ls -l target/
          echo "Showing contents:"
          head -n 20 target/TEST-junit-jupiter.xml || echo "Report not found!"

      - name: Push unit test results to Xray on Jira Cloud
        working-directory: ./backend
        env:
          XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
          XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
        run: |
          # Only proceed if JUnit report exists
          if [ -f "target/TEST-junit-jupiter.xml" ]; then
            mvn -Pexclude-functional-tests \
              -Dxray.clientId=$XRAY_CLIENT_ID \
              -Dxray.clientSecret=$XRAY_CLIENT_SECRET \
              -Dxray.reportFormat=junit \
              -Dxray.reportFile=target/TEST-junit-jupiter.xml \
              app.getxray:xray-maven-plugin:import-results
          else
            echo "No JUnit test report found, skipping Xray upload"
          fi